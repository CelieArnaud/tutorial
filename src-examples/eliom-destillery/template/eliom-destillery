#!/bin/sh

HELP_TEXT="\
  Hi, this is your local Eliom destillery.  Usage:
  $ `basename $0` [--help] [--destination dir]"

DESCRIBE_MINIMAL="\
  Just a single Eliom-file, but with an \"integrated\" config- and make-file."

DESTINATION_WITH_DATABASE="\
  Basic setup of a database. It will create an showcase table in database.ml,
  and provide the ability to configure it in the configuration file."

DESCRIBE_BASIC_USER="\
  You get a database table for users, login- and logout-services, and widgets
  for it."

while [ $# -gt 0 ]; do
  case $1 in
    --help)
      echo "$HELP_TEXT"
      exit 0;;
    --destination)
      DESTINATION_DIR=$2
      shift;;
    --debug)
      set -x;;
    *)
      echo "$HELP_TEXT"
      echo "Unknown option $1"
      exit 1;;
  esac
  shift
done

question() {
  echo -n ">> $1"
}

read_yes_no() {
  question "$2 (Y/h/_)? "
  read answer
  case $answer in
    "" | "y" | "Y")
      eval $1=true;;
    "h")
      echo $3
      read_yes_no "$1" "$2" "$3"
      ;;
    *)
      eval $1=false;;
  esac
}

make_project_name() {
  echo "$1"|sed -e 's/[ ,*?!.]/_/g'
}

# Find the source directory
TEMPLATE_DIR=`dirname $0`/template

# Find the destination directory
if [ -z $1 ]; then
  DESTINATION_DIR=`pwd`
else
  DESTINATION_DIR=$1
fi


# Get PROJECT_NAME
if [ -z $PROJECT_NAME ]; then
  here=`basename $DESTINATION_DIR`
  name_guess=`make_project_name "$here"`
  question "Name of the project (default \"$name_guess\"): "
  read PROJECT_NAME
  if [ -z "$PROJECT_NAME" ] ; then
    PROJECT_NAME=$name_guess
  fi
  PROJECT_NAME=`make_project_name "$PROJECT_NAME"`
  echo "Ok, I call it "$PROJECT_NAME"."
fi


# Get MINIMAL_PROJECT
if [ -z $MINIMAL_PROJECT ]; then
  read_yes_no MINIMAL_PROJECT "A very basic project is enough" "$DESCRIBE_MINIMAL"
fi


# Get WITH_DATABASE
if ! $MINIMAL_PROJECT ; then
  if [ -z $WITH_DATABASE ]; then
    read_yes_no WITH_DATABASE "You need a bit of this database caboodle, too" "$DESTINATION_WITH_DATABASE"
  fi
fi

# Get DATABASE_USER and DATABASE_NAME
if $WITH_DATABASE ; then
  if [ -z $DATABASE_USER ]; then
    question "What is the database user: "
    read DATABASE_USER
  fi
  if [ -z $DATABASE_NAME ]; then
    question "What is the database name: "
    read DATABASE_NAME
  fi
fi

# Get BASIC_USER
if $WITH_DATABASE ; then
  if [ -z $BASIC_USER ]; then
    read_yes_no BASIC_USER "And what about some user handling" "$DESCRIBE_BASIC_USER"
  fi
fi

# Assemble arguments
sed_args="\
  -e s/##PROJECT_NAME##/$PROJECT_NAME/g \
  -e s/##MODULE_NAME##/`echo $PROJECT_NAME|sed 's/^./\u&/;'`/g "
cpp_args="-P -traditional-cpp -N "
if $MINIMAL_PROJECT ; then
  cpp_args="$cpp_args -D MINIMAL_PROJECT "
else
  if $WITH_DATABASE ; then
    cpp_args="$cpp_args -D WITH_DATABASE"
    sed_args="$sed_args \
      -e s/##DATABASE_USER##/$DATABASE_USER/g \
      -e s/##DATABASE_NAME##/$DATABASE_NAME/g "
    if $BASIC_USER ; then
      cpp_args="$cpp_args -D BASIC_USER "
    fi
  fi
fi

# Populate database
#if $WITH_DATABASE ; then
  #psql -U $DATABASE_USER $DATABASE_NAME
  #TODO
#fi


echo sed_args $sed_args
echo cpp_args $cpp_args

# Generate files
generate() {
  if [ -e "$DESTINATION_DIR/$2" ] ; then
    echo The file $DESTINATION_DIR/$2 already exists.
    exit 1
  fi
  cpp $cpp_args "$TEMPLATE_DIR/$1" | sed $sed_args \
    > "$DESTINATION_DIR/$2"
  echo "Generated $DESTINATION_DIR/$2"
}
generate README README
generate Makefile Makefile
generate PROJECT_NAME.eliom $PROJECT_NAME.eliom
generate PROJECT_NAME.conf.in $PROJECT_NAME.conf.in
if ! $MINIMAL_PROJECT ; then
  generate shared.ml shared.ml
  generate config.ml config.ml
  generate database.ml database.ml
  generate services.ml services.ml
  generate widgets.eliom widgets.eliom
fi
mkdir -p $DESTINATION_DIR/static/css
generate "static/css/PROJECT_NAME.css" "static/css/$PROJECT_NAME.css"

#-dropdb $(APP_NAME)
#sudo -u postgres createdb -O $(DB_USER) $(APP_NAME)
#psql -U $(DB_USER) $(APP_NAME) < createdb.sql
