
= Introduction =


==Overview of the tutorial==
This tutorial is an overview of the main features of the Ocsigen framework.
It explains how to program web sites and client-server web applications in
//OCaml// using //Eliom//, //Lwt//, //Js~_of~_ocaml// and the other
software of the Ocsigen project.
Read it to understand the basics, 
then refer to each project's manual for more detail.

//Warning:// This programming guide assumes you know the //OCaml//
language, and that you have a working installation of //Ocsigen
server//, //Eliom//, //Lwt//, //Js_of_ocaml//, (and //O'Closure// for
some examples). In particular, you need to have the interfaces (cmi)
installed for all these packages. They are sometimes in separate
packages ("{{{-dev}}}" packages in Debian/Ubuntu). We recommend to use
the packages from your distribution if they are available. If not, try
to install all OCaml related packages with the bundle we provide, or using
[[http://godi.camlcity.org|Godi]]. If it does not work, please report
the problem to the package maintainers. We recommend to use the source
packages only if you want to test unreleased features from development
versions.

The reminder of this introduction is an overview of the main projects
we have. In the following chapters, we will show how to build
step by step a small client/server Web application.

<<wip|
Manuals are permanently under construction.
Please report any error, mistake, and send us your comments and suggestions!
>>
            
==Ocsigen software projects==

Most projects are independent and can be use for non Eliom-releated projects,
for example:
* the cooperative threading library Lwt,
* The TyXML library for generating typed XML,
* the database query library Macaque,
* the Js_of_ocaml compiler (from Ocaml bytecode to Javascript),
* the O'Closure library, a binding for the Google closure Javascript widget
library to be used with Js_of_ocaml,
* the Ocsigen server Web server.


===Ocsigen server===

//Ocsigen server// is a full featured Web server writtent in modular way.
It implements most features of the HTTP protocol, and has a very powerful
extension mechanism that make very easy to plug your own OCaml modules
for generating pages. Many extensions are already written:
;<<a_manual project="ocsigenserver" chapter="staticmod"|Staticmod>>
:    is an extension to serve static files. 
;[[wiki(15):|Eliom]]
:    is an extension to create client/server Web applications or Web sites
     in OCaml using advanced high level concepts. 
;<<a_manual project="ocsigenserver" chapter="extendconfiguration"|Extendconfiguration>>
:    allows for more options in the configuration file. 
;<<a_manual project="ocsigenserver" chapter="accesscontrol"|Accesscontrol>>
:    allows to restrict the access to the sites from the config file (to request coming from a subnet, containing some headers, etc.). 
;<<a_manual project="ocsigenserver" chapter="authbasic"|Authbasic>>
:    allows to restrict the access to the sites from the config file using Basic HTTP Authentication. 
;<<a_manual project="ocsigenserver" chapter="cgimod"|CGImod>>
:    is an extension to serve CGI scripts. It may also be used to serve PHP through CGI. 
;<<a_manual project="ocsigenserver" chapter="deflatemod"|Deflatemod>>
:    is an extension used to compress data before sending to the client. 
;<<a_manual project="ocsigenserver" chapter="redirectmod"|Redirectmod>>
:    is an extension to set redirections towards other Web sites from the configuration file. 
;<<a_manual project="ocsigenserver" chapter="revproxy"|Revproxy>>
:    is a reverse proxy for Ocsigen server.
      It allows to ask another server to handle the request. 
;<<a_manual project="ocsigenserver" chapter="rewritemod"|Rewritemod>>
:    is a module to rewrite requests. 
;<<a_manual project="ocsigenserver" chapter="outputfilter"|Outputfilter>>
:    allows to rewrite some parts of the output before sending it to the client. 
;<<a_manual project="ocsigenserver" chapter="userconf"|Userconf>>
:    allows users to have their own configuration files. 
;<<a_manual project="ocsigenserver" chapter="comet"|Comet>>
:    makes server to client communications possible.

Ocsigen server has a sophisticated configuration file mechanism allowing
complex configurations of sites.


===Eliom===
            
Eliom is an extension for //Ocsigen server//
that allows the creation of client/server web applications (or traditional dynamic websites) in OCaml.
It implements many new concepts, and as a result, its approach to application development is very different 
from all other web programming tools.

==== High level primitives ====
Eliom enables the creation of complex web sites in very few lines of code, by providing high level programming primitives for many aspects of web programming: communication between the client and the server, implementation of complex web interaction, sessions, etc.
<<span class="wip"|continuations?>>

==== Static typing ====
Eliom also improves the stability of your application by  making extensive use of OCaml's static typing. For example, the validity of pages (e.g. well-formed HTML) is checked at compile time!  Moreover, Eliom also statically checks, for example, that your web site does not contain broken links or that the parameters in a link or a form correspond to the service it leads to (and many other things).

==== A client/server application in one piece of code! ====
But one of the most significant features of Eliom is that it allows to program both sides of a web application as a single program. The client side parts are automatically extracted and compiled into Javascript to be executed in the browser. The communication between the server is straightforward (in both directions!), as you can use server side values in the client side code.

Note that client side features can be mixed with traditional Web interaction
(links, forms, bookmarks, back button ...)

==== Security ====
Eliom helps you to make your web application secure by automatically addressing several common security issues (code injection, session fixation~ ...) and by providing features to implement very secure behaviours (avoiding for example "cross-site request forgery").\\


===Lwt===
//Lwt// is a cooperative thread library for OCaml.

===Js_of_ocaml===
//Js_of_ocaml// is a compiler of OCaml bytecode to Javascript. It makes it possible to run Ocaml programs in a Web browser. Its key features are the following:
* The whole language, and most of the standard library are supported.
* The compiler is easy to install: it only depends on Findlib and Lwt.
* The generated code is independant of Eliom and the Ocsigen server. You can use it with any Web server.
* You can use a standard installation of OCaml to compile your programs. In particular, you do not have to recompile a library to use it with Js_of_ocaml. You just have to link your program with a specific library to interface with the browser APIs.

===Macaque===
//Macaque// is a library for safe and flexible database queries
using comprehensions.

===O'Closure===
//O'Closure// is a binding for the Google Closure Javascript widget library.
It makes possible to write dynamic user interfaces for web pages in OCaml
using Js_of_ocaml.


